//https://javadoc.io/doc/com.badlogicgames.gdx/gdx/latest/index.html
import com.badlogic.gdx.ApplicationAdapter;
import com.badlogic.gdx.Gdx;
import com.badlogic.gdx.Screen;
import com.badlogic.gdx.graphics.GL20;
import com.badlogic.gdx.graphics.OrthographicCamera;
import com.badlogic.gdx.utils.viewport.*;
import com.badlogic.gdx.graphics.g2d.BitmapFont;
import com.badlogic.gdx.graphics.g2d.SpriteBatch;
import com.badlogic.gdx.graphics.Color;
import com.badlogic.gdx.graphics.glutils.ShapeRenderer;
import com.badlogic.gdx.graphics.glutils.ShapeRenderer.ShapeType;
import com.badlogic.gdx.math.Rectangle;
import com.badlogic.gdx.math.Circle;
import com.badlogic.gdx.Input.Keys;
import com.badlogic.gdx.math.Vector2;
import com.badlogic.gdx.math.MathUtils;
import com.badlogic.gdx.math.Intersector;
import com.badlogic.gdx.graphics.g2d.GlyphLayout;
import com.badlogic.gdx.utils.*;
import com.badlogic.gdx.*;
import com.badlogic.gdx.graphics.*;

//NOTE: Always reset the JVM before compiling (it is the small loop arrow in the
//bottom right corner of the project window)!!

public class Template extends ApplicationAdapter
{
    private OrthographicCamera camera; //the camera to our world
    private Viewport viewport; //maintains the ratios of your world
    private ShapeRenderer renderer; //used to draw textures and fonts

    public static final float WORLD_WIDTH = 400;
    public static final float WORLD_HEIGHT = 400;

    @Override//called once when we start the game
    public void create(){
   	 camera = new OrthographicCamera();
   	 viewport = new FitViewport(WORLD_WIDTH, WORLD_HEIGHT, camera);
   	 renderer = new ShapeRenderer();    
    }

    @Override//called 60 times a second
    public void render(){
   	 //these 2 lines clear the screen and set the background color every FRAME.
   	 Gdx.gl.glClearColor(0, 0, 0.2f, 1);
   	 Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT);

   	 renderer.begin(ShapeType.Filled);

   	 // //Checkerboard
   	 //Same pattern repeats every other time
   	 // for (int i=0; i<20; i++) {
   	 // for (int j=0; j< 20; j++) {
   	 // if(((i + j) % 2) != 0)
   	 // renderer.setColor(Color.BLACK);
   	 // else
   	 // renderer.setColor(Color.WHITE);
   	 // }
   	 // }

   	 // int x=0;
   	 // int pattern=2;
   	 // for(int y=0; y<400; y+=50) {
   	 // for (x=0; x<401; x+=50) {
   	 // switch (pattern) {
   	 // case 1: renderer.setColor(Color.WHITE);
   	 // pattern++;
   	 // break;

   	 // case 2: renderer.setColor(Color.BLACK);
   	 // pattern--;
   	 // break;
   	 // }
   	 // }
   	 // }

   	 //Nested square
   	 int x=0;
   	 int y=0;
   	 int a=400;
   	 int b=400;

   	 int m=x/10; //For the if statement

   	 renderer.setColor(Color.BLACK);
   	 renderer.rect(x, y, a, b);

   	 for(int i=0; i<=20; i++) {
   		 // for(int k=0; k<20; k++) {
   		 if(x>=0 && x<=20 && x%20==0) {
       		 renderer.setColor(Color.BLACK);
       		 renderer.rect(x, y, a, b);
       		 x+=10;
       		 y+=10;
       		 a-=10;
       		 b-=10;
   		 }
   		 else {
       		 renderer.setColor(Color.WHITE);
       		 renderer.rect(x, y, a, b);
       		 x+=10;
       		 y+=10;
       		 a-=10;
       		 b-=10;
   		 }
   	 }
   	 renderer.end();
    }

    @Override
    public void resize(int width, int height){
   	 viewport.update(width, height, true);
    }

    @Override
    public void dispose(){
   	 renderer.dispose();
    }
}