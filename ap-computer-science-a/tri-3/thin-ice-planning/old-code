public class OldCode {
	/*private Texture player; //1
	private Texture unusedBlock; //2
	private Texture wallBlocker; //3
	private Texture ice; //4
	private Texture water; //5
	private Texture nextLevel; //6*/

	/*public void drawLayoutForLevel2() {
	// Clear the screen
	Gdx.gl.glClearColor(0, 0, 0, 1);
	Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT);

	// Set the projection matrix
	batch.setProjectionMatrix(camera.combined);

	// Begin rendering
	batch.begin();

	// Draw the game board
	for (int row = 0; row < HEIGHT; row++) {
	for (int col = 0; col < WIDTH; col++) {
	float x = col * TILE_SIZE;
	float y = row * TILE_SIZE;

	// Determine the texture based on the value in the board array
	Texture texture;
	switch (board[row][col]) {
case 2:
	texture = unusedBlock;
	break;
case 3:
	texture = wallBlocker;
	break;
case 4:
	texture = ice;
	break;
case 5:
	texture = water;
	break;
case 6:
	texture = nextLevel;
	break;
default:
	texture = null;
	break;
	}

	// Draw the texture
	if (texture != null) {
	batch.draw(texture, x, y, TILE_SIZE, TILE_SIZE);
	}
	}
	}

	// Draw the player character
	batch.draw(player, thePlayer.x, thePlayer.y, TILE_SIZE, TILE_SIZE);

	// End rendering
	batch.end();
	}*/

	/*import com.badlogic.gdx.ApplicationAdapter;
	import com.badlogic.gdx.Gdx;
	import com.badlogic.gdx.Input;
	import com.badlogic.gdx.graphics.GL20;
	import com.badlogic.gdx.graphics.OrthographicCamera;
	import com.badlogic.gdx.graphics.Texture;
	import com.badlogic.gdx.graphics.g2d.SpriteBatch;

	public class ThinIceGame extends ApplicationAdapter {
	private static final int TILE_SIZE = 64;

	private SpriteBatch batch;
	private Texture playerTexture;
	private Texture iceTexture;
	private Texture waterTexture;
	private char[][] board;
	private int playerRow;
	private int playerCol;
	private int currentLevel;

	private final char[][][] levels = {
	{
	{'W', 'W', 'W', 'W', 'W', 'W', 'W', 'W', 'W'},
	{'W', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'W'},
	{'W', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'W'},
	{'W', 'I', 'I', 'P', 'I', 'I', 'I', 'I', 'W'},
	{'W', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'W'},
	{'W', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'W'},
	{'W', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'W'},
	{'W', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'W'},
	{'W', 'W', 'W', 'W', 'W', 'W', 'W', 'W', 'W'}
	},
	// Add more levels here
	};

	@Override
	public void create() {
	batch = new SpriteBatch();
	playerTexture = new Texture("player.png");
	iceTexture = new Texture("ice.png");
	waterTexture = new Texture("water.png");

	currentLevel = 0;
	loadLevel(currentLevel);
	}

	private void loadLevel(int levelIndex) {
	board = levels[levelIndex];

	for (int row = 0; row < board.length; row++) {
	for (int col = 0; col < board[0].length; col++) {
	if (board[row][col] == 'P') {
	playerRow = row;
	playerCol = col;
	}
	}
	}
	}

	@Override
	public void render() {
	handleInput();

	Gdx.gl.glClearColor(0.4f, 0.6f, 1f, 1f);
	Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT);

	batch.begin();

	drawBoard();

	batch.draw(playerTexture, playerCol * TILE_SIZE, playerRow * TILE_SIZE);

	batch.end();
	}

	private void handleInput() {
	int newRow = playerRow;
	int newCol = playerCol;

	if (Gdx.input.isKeyJustPressed(Input.Keys.W)) {
	newRow++;
	} else if (Gdx.input.isKeyJustPressed(Input.Keys.A)) {
	newCol--;
	} else if (Gdx.input.isKeyJustPressed(Input.Keys.S)) {
	newRow--;
	} else if (Gdx.input.isKeyJustPressed(Input.Keys.D)) {
	newCol++;
	}

	if (isValidMove(newRow, newCol)) {
	playerRow = newRow;
	playerCol = newCol;
	}
	}

	private boolean isValidMove(int row, int col) {
	if (row < 0 || row >= board.length || col < 0 || col >= board[0].length) {
	return false;
	}
	return board[row][col] != 'W';
	}

	private void drawBoard() {
	for (int row = 0; row < board.length; row++) {
	for (int col = 0; col < board[0].length; col++) {
	float x = col * TILE_SIZE;
	float y = row * TILE_SIZE;

	Texture texture;
	switch (board[row][col]) {
case 'W':
	texture = waterTexture;
	break;
case 'I':
	texture = iceTexture;
	break;
default:
	continue;
	}

	batch.draw(texture, x, y);
	}
	}
	}

	private boolean isLevelComplete() {
	return board[playerRow][playerCol] == 'F';
	}

	private void advanceToNextLevel() {
	currentLevel++;
	if (currentLevel >= levels.length) {
	// All levels completed
	Gdx.app.exit();
	} else {
	loadLevel(currentLevel);
	}
	}

	@Override
	public void dispose() {
	batch.dispose();
	playerTexture.dispose();
	iceTexture.dispose();
	waterTexture.dispose();
	}
	}*/
}