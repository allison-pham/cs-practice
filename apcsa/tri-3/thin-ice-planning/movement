import com.badlogic.gdx.Gdx; //Audio & graphics
import com.badlogic.gdx.Input.Keys; //Press buttons & keys
import com.badlogic.gdx.graphics.Texture; //Buttons
public class Movement {
	public static int[][] board = Game.board;
	//Can move on ICE & NEXT_LEVEL
	//Cannot move on UNUSED_BLOCK, WALL_BLOCKER, & WATER
	/*public static void move() {
    	for(int r = 0; r < board.length; r++) {
        	for(int c = 0; c < board[0].length; c++) {
            	if(board[r][c] == 1) { //if(current position (1) == player (1))
                	if(Gdx.input.isKeyPressed(Keys.UP)) { // board[r-1][c] == ICE
                    	Stats.countMovement();
                    	goUp();
                	}
                	if(Gdx.input.isKeyPressed(Keys.DOWN)) { // board[r+1][c] == ICE
                    	Stats.countMovement();
                    	goDown();
                	}
                	if(Gdx.input.isKeyPressed(Keys.LEFT)) { // board[r][c-1] == ICE
                    	Stats.countMovement();
                    	goLeft();
                	}
                	if(Gdx.input.isKeyPressed(Keys.RIGHT)) { // board[r][c+1] == ICE
                    	Stats.countMovement();                   	 
                    	goRight();
                	}
            	}
        	}
    	}
	}*/

	public static void goUp() {
    	//Option 1: get exact position --> need a nested for loop
    	//Option 2: maybe use instance variables for row & col that's used in every class
    	// int row = zeroRow();
    	// int col = zeroCol();
    	// int row = ICE;
    	// int col = ICE;
    	for(int r = 0; r < board.length; r++) {
        	for(int c = 0; c < board[0].length; c++) {
            	if(r-1 >= 0 && board[r-1][c] == 4) {
                	if(Stats.lose() == false && (board[r-1][c] == 4)) {
                    	//Check if in bounds
                    	// if(Stats.lose() == false && row == ICE && col == ICE)
                    	//if(board[r-1][c] == ICE) --> movement
                    	board[r][c] = board[r-1][c];
                    	board[r+1][c] = 5;
                	}
                	if(Stats.lose()) { //If player loses
                    	Game.runLevel();
                	}
                	if(board[r-1][c] == 6) { //If player reaches new level
                    	Game.runLevel();
                	}
            	}
        	}
    	}
    	Game.runLevel();
	}

	public static void goDown() {
    	for(int r = 0; r < board.length; r++) {
        	for(int c = 0; c < board[0].length; c++) {
            	if(r+1 < board.length && board[r+1][c] == 4) {
                	if(Stats.lose() == false && (board[r+1][c] == 4)) {          	 
                    	board[r][c] = board[r+1][c];
                    	board[r-1][c] = 5;
                	}
                	if(Stats.lose()) //If player loses
                    	Game.runLevel();
                	if(board[r+1][c] == 6) //If player reaches new level
                    	Game.runLevel();
            	}
        	}
    	}
    	Game.runLevel();
	}

	public static void goLeft() {
    	for(int r = 0; r < board.length; r++) {
        	for(int c = 0; c < board[0].length; c++) {
            	if(c-1 >= 0 && board[r][c-1] == 4 || board[r][c-1] == 6) {
                	//c + 1 < board[0].length
                	// if(Stats.lose() == false && //**put back**
                	System.out.println("board: " + board[r][c]);    
                	board[r][c] = board[r][c-1];
                    	board[r][c+1] = 5;
                	/*if(Stats.lose()) //If player loses
                    	Game.runLevel();
                	if(board[r][c-1] == 6) //If player reaches new level
                    	Game.runLevel();*/
                    	//**Uncomment out**
            	}
        	}
    	}
    	Game.runLevel();
	}

	public static void goRight() {
    	for(int r = 0; r < board.length; r++) {
        	for(int c = 0; c < board[0].length; c++) {
            	if(c+1 < board[0].length && board[r][c+1] == 4) {
                	if(Stats.lose() == false && (board[r][c+1] == 4)) {
                    	board[r][c] = board[r][c+1];
                    	board[r][c-1] = 5;
                	}
                	if(Stats.lose()) //If player loses
                    	Game.runLevel();
                	if(board[r][c+1] == 6) //If player reaches new level
                    	Game.runLevel();
            	}
        	}
    	}
    	Game.runLevel();
	}

	/*public static int zeroRow() {
	return -1;
	}

	public static int zeroCol() {
	return -1;
	}*/
}