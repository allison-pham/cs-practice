import java.awt.Rectangle;
public class Stats {
	public static int[][] board = Game.board;

	public static int coinBags = Game.coinBags;
	public static int coins = Game.coins;
	public static int denominator = Game.denominator;
	public static int iceMelted = Game.iceMelted;
	public static int level = Game.level;
	public static int numerator = Game.numerator;
	public static int points = Game.points;
	public static String tilesReached = Game.tilesReached;
	/*public static void runLevel() {
	//Call method when: PLAYER == NEXT_LEVEL or when lose() == true
	if(win() == false) {
	for(int r = 0; r < board.length; r++) {
	for(int c = 0; c < board[0].length; c++) {
	if(board[r][c] == 1 && board[r][c] == 6
	&& lose() == false)
	//if(lose() == true) --> player replays the level they just loss
	level++;
	// nextLevel = true;
	// levelTwo();

	//Will take back to the same level b/c level++ doesn't happen
	if(level == 1)
	Levels.level1();
	if(level == 2)
	Levels.level2();
	if(level == 3)
	Levels.level3();
	if(level == 4)
	Levels.level4();
	if(level == 5)
	Levels.level5();
	if(level == 6)
	Levels.level6();
	if(level == 7)
	Levels.level7();
	if(level == 8)
	Levels.level8();
	if(level == 9)
	Levels.level9();
	if(level == 10)
	Levels.level10();
	}
	}
	}
	/*while(Stats.win() == false) { //Run after
 	* runLevel()
 	* }
 	*/
	//if(move) --> lose() == false}*/

	/*public static void replayLevel() {
	if(lose() == true)
	runLevel(); //Will take back to the same level b/c level++ doesn't happen
	}*/

	public static boolean win() {
    	boolean winner = false;
    	//Once level reaches level+1, then stop checking win()
    	if(level == 11)
    	//Levels currently: 10
    	//level+1 = level that doesn't exist --> don't run any of the Level class methods anymore
        	winner = true;
    	return winner;
	}

	public static boolean lose() { //Player doesn't lose() the game, they just restart the level
    	//Run lose() for each time the player moves (in Movement class)
    	boolean loss = false;
    	for(int r = 0; r < board.length; r++) {
        	for(int c = 0; c < board[0].length; c++) {
            	//if(player is surrounded by water)
            	if(r-1 >= 0 && r+1 <= board.length-1 && c-1 >= 0 && c+1 <= board[0].length
            	&& (board[r-1][c] == 5)
            	&& (board[r+1][c] == 5)
            	&& (board[r][c-1] == 5)
            	&& (board[r][c+1] == 5)) {
                	loss = true;
                	break;
            	}
        	}
    	}
    	// Game.advanceToNextLevel();
    	// if(loss)
    	// Game.runLevel(); //Player will replay the level the lossed at b/c level++ won't happen
    	return loss;
	}

	public void countCointBags() {
    	for(int r = 0; r < board.length; r++) {
        	for(int c = 0; c < board[0].length; c++) {
            	if(board[r][c] == coinBags) //**Have it check if it's equal to a COIN_BAG instance variable**
                	coinBags++;
        	}
    	}
	}

	public static void countMovement() { //Display at top of screen
    	iceMelted++;
    	numerator++;
	}

	public static void countDenominator() { //Call in each method instead of constantly putting nested for loop
    	//Count before running Movement class methods
    	for(int r = 0; r < board.length; r++) {
        	for(int c = 0; c < board[0].length; c++) {
            	if(board[r][c] == 4 || board[r][c] == 6)
                	denominator++; //Based on ice & next level slot
            	//denominator++ means denominator = ICE + NEXT_LEVEL
        	}
    	}
	}

	public static void numeratorDenom() { //Display at top of screen
    	//tilesReached = numerator / denominator (not dividing)
    	tilesReached = numerator + "/" + denominator;
	}

	public void score() { //Call only once (for final score) --> display once win() == true
    	points+=coins+iceMelted;
	}
}