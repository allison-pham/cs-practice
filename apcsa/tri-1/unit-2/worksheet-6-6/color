import chn.util.*;
import apcslib.*;
import java.awt.Color;
public class Circle {
    private double radius; //All instance variables are private
    //Declare
    private double x;
    private double y;
    private Color c;
    private int width;

    //static --> this is SHARED among ALL Circle objects
    private static DrawingTool pen=new DrawingTool(new SketchPad (1000,1000));
    //static is needed to make sure a new SketchPad isn't created each time

    public Circle(double radiusNum, double theX, double theY) { //Non-default constructor has to have something in the ()
   	 //Constructors need to have the same name as the class
   	 radius=radiusNum; //Initialize
   	 x=theX;
   	 y=theY;
   	 width=1;
   	 c=Color.DARK_GRAY;
    }

    public Circle(double radiusNum) { //Non-default constructor
   	 radius=radiusNum;
   	 x=0;
   	 y=0;
   	 width=1;
   	 c=Color.DARK_GRAY;
    }

    //Copy constructor: copies the attributes of an existing Circle object
    public Circle(Circle otherCircle) {
   	 radius=otherCircle.radius;
   	 x=otherCircle.x;
   	 y=otherCircle.y;
   	 c=otherCircle.c;
   	 width=otherCircle.width; //width=1; also works
    }

    public double getArea() { //If there is nothing in the (), then putting a # isn't required
   	 double area=radius*radius;
   	 area=Math.PI*area;
   	 return area;
    }

    public double getPerimeter() {
   	 double perimeter=2*Math.PI*radius;
   	 return perimeter;
    }

    //4 setters & 4 getters:
    public void setX(double theX) {
   	 x=theX;
    }

    public void setY(double theY) {
   	 y=theY;
    }

    public void setRadius(double theRadius) {
   	 radius=theRadius;
    }

    public void setColor (Color theColor) {
   	 c=theColor;
    }

    public void setWidth(int theWidth) {
   	 width=theWidth;
    }

    public double getX() {
   	 return x;
    }

    public double getY() {
   	 return y;
    }

    public double getRadius() {
   	 return radius;
    }

    public Color getColor() {
   	 return c;
    }

    public int getWidth() {
   	 return width;
    }

    public void draw() { //void is for when there is no "return"
   	 pen.up();
   	 pen.move(x,y);
   	 pen.down();
  	 
   	 pen.drawString("radius: "+radius); //Draw text w/ the terminal window
   	 pen.setColor(c); //*Important!*
   	 pen.setWidth(width);
   	 pen.drawCircle(radius);
    }
}