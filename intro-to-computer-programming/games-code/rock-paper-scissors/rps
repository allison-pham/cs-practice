import com.badlogic.gdx.ApplicationAdapter;
import com.badlogic.gdx.Gdx;
import com.badlogic.gdx.Screen;
import com.badlogic.gdx.graphics.GL20;
import com.badlogic.gdx.graphics.OrthographicCamera;
import com.badlogic.gdx.utils.viewport.*;
import com.badlogic.gdx.graphics.g2d.BitmapFont;
import com.badlogic.gdx.graphics.g2d.SpriteBatch;
import com.badlogic.gdx.graphics.Color;
import com.badlogic.gdx.graphics.glutils.ShapeRenderer;
import com.badlogic.gdx.graphics.glutils.ShapeRenderer.ShapeType;
import com.badlogic.gdx.math.Rectangle;
import com.badlogic.gdx.math.Circle;
import com.badlogic.gdx.Input.Keys;
import com.badlogic.gdx.math.Vector2;
import com.badlogic.gdx.math.MathUtils;
import com.badlogic.gdx.math.Intersector;
import com.badlogic.gdx.graphics.g2d.GlyphLayout;
import com.badlogic.gdx.graphics.Texture;
import com.badlogic.gdx.InputProcessor;
import com.badlogic.gdx.*;

public class RPS extends ApplicationAdapter implements InputProcessor
{
    private OrthographicCamera camera; //the camera to our world
    private Viewport viewport; //maintains the ratios of your world
    private ShapeRenderer renderer; //used to draw textures and fonts
    private BitmapFont font; //used to draw fonts (text)
    private SpriteBatch batch; //also needed to draw fonts (text)

    private Texture[] textures; //holds the images for rock, paper, and scissors
    private Rectangle rockButton; //Rectangle, for rockButton
    private Rectangle paperButton;
    private Rectangle scissorsButton;

    private int ctr; //controls the speed the images are flashing
    private int computer;//random int for the computers choice of rock, paper, or scissors
    private Vector2 worldCoord;
    private Vector2 screenCoord;
    private int player;
    private boolean buttonPressed; //has a button been pressed

    private GlyphLayout layout;
    public static final float WORLD_WIDTH = 800;
    public static final float WORLD_HEIGHT = 480;
    public static final int SCROLL_SPEED = 4; //speed of images: increase to slow down
    public static final float IMAGE_WIDTH = 200;
    public static final float IMAGE_HEIGHT = 120;
    public static final float BUTTON_WIDTH = 100;
    public static final float BUTTON_HEIGHT = 50;

    //constants to make our code more readable
    public static final int ROCK = 0;
    public static final int PAPER = 1;
    public static final int SCISSORS = 2;

    @Override
    public void create(){
   	 camera = new OrthographicCamera();
   	 viewport = new FitViewport(WORLD_WIDTH, WORLD_HEIGHT, camera);
   	 renderer = new ShapeRenderer(); //used to draw shapes on the screen
   	 font = new BitmapFont();//used for text on the screen

   	 font.getData().markupEnabled = true; //change color
   	 batch = new SpriteBatch(); //used to draw textures and font

   	 Gdx.input.setInputProcessor(this);//needed for input

   	 textures = new Texture[3]; //new texture array of length 3
   	 textures[0] = new Texture(Gdx.files.internal("rock.png"));//load the images into the array
   	 textures[1] = new Texture(Gdx.files.internal("paper.png"));
   	 textures[2] = new Texture(Gdx.files.internal("scissors.png"));

   	 screenCoord = new Vector2(Gdx.input.getX(),Gdx.input.getY());//get the coordinate of the mouse
   	 worldCoord = new Vector2(viewport.unproject(screenCoord));  //translate it so the bottom left is (0,0)

   	 rockButton = new Rectangle(425, 50, BUTTON_WIDTH, BUTTON_HEIGHT);
   	 paperButton = new Rectangle(550, 50, BUTTON_WIDTH, BUTTON_HEIGHT);
   	 scissorsButton = new Rectangle(675, 50, BUTTON_WIDTH, BUTTON_HEIGHT);
   	 layout = new GlyphLayout(font, "[BLUE]ROCK");

   	 ctr = 0;
   	 computer = 0;
   	 player = -1;
   	 buttonPressed = false;
    }

    @Override
    public void render(){
   	 Gdx.gl.glClearColor(0, 0, 0.2f, 1);
   	 Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT);

   	 //update
   	 if(!buttonPressed)
   	 {
   		 ctr++;//render is automatically getting called 60 times a second

   		 if(ctr % SCROLL_SPEED == 0)//use SCROLL_SPEED to control how often computer gets increase
       		 computer++;
   		 //TODO reassign the value of computer to be a value between 0 and 2 (right now it will count like: 0, 1, 2, 3, 4, 5). Hint use modulus
   		 computer=computer%3;
   	 }

   	 renderer.setProjectionMatrix(viewport.getCamera().combined);
   	 renderer.begin(ShapeRenderer.ShapeType.Filled);
   	 renderer.setColor(new Color(1, 1, 1, 1));

   	 renderer.rect(rockButton.x, rockButton.y, rockButton.width, rockButton.height);
   	 renderer.rect(paperButton.x, paperButton.y, paperButton.width, paperButton.height);
   	 renderer.rect(scissorsButton.x, scissorsButton.y, scissorsButton.width, scissorsButton.height);

   	 renderer.end();

   	 batch.setProjectionMatrix(viewport.getCamera().combined);     
   	 batch.begin();

   	 batch.draw(textures[computer], 0, WORLD_HEIGHT / 2 - IMAGE_HEIGHT / 2 , 200, 200);

   	 if(Gdx.input.isButtonJustPressed(Input.Buttons.LEFT) && buttonPressed
   	 && !rockButton.contains(worldCoord) && !paperButton.contains(worldCoord)
   	 && !scissorsButton.contains(worldCoord))
   	 {
   		 //check if click location is not in a button position
   		 buttonPressed = false;
   		 player = -1;
   	 }

   	 if(!buttonPressed)
   	 {
   		 if(rockButton.contains(worldCoord))
       		 layout.setText(font, "[RED]ROCK");
   		 else
       		 layout.setText(font, "[BLUE]ROCK");
   		 float x = rockButton.x + (BUTTON_WIDTH / 2) - (layout.width / 2);
   		 float y = rockButton.y + (BUTTON_HEIGHT / 2) + (layout.height / 2);
   		 font.draw(batch, layout, x, y); //when drawing a font the x and y is at the top left

   		 if(paperButton.contains(worldCoord))
       		 layout.setText(font, "[RED]PAPER");
   		 else
       		 layout.setText(font, "[BLUE]PAPER");
   		 x = paperButton.x + (BUTTON_WIDTH / 2) - (layout.width / 2);
   		 y = paperButton.y + (BUTTON_HEIGHT / 2) + (layout.height / 2);
   		 font.draw(batch, layout, x, y);

   		 if(scissorsButton.contains(worldCoord))
       		 layout.setText(font, "[RED]SCISSORS");
   		 else
       		 layout.setText(font, "[BLUE]SCISSORS");
   		 x = scissorsButton.x + (BUTTON_WIDTH / 2) - (layout.width / 2);
   		 y = scissorsButton.y + (BUTTON_HEIGHT / 2) + (layout.height / 2);
   		 font.draw(batch, layout, x, y);

   		 if(Gdx.input.isButtonJustPressed(Input.Buttons.LEFT) && !buttonPressed)
   		 {
       		 if(rockButton.contains(worldCoord))
       		 {
           		 player = ROCK;
           		 buttonPressed = true;

       		 }
       		 if(paperButton.contains(worldCoord))
       		 {
           		 player = PAPER;
           		 buttonPressed = true;
       		 }
       		 if(scissorsButton.contains(worldCoord))
       		 {
           		 player = SCISSORS;   
           		 buttonPressed = true;
       		 }

   		 }
   	 }
   	 if(player != -1)
   	 {
   		 batch.draw(textures[player], WORLD_WIDTH - textures[player].getWidth(),
       		 WORLD_HEIGHT / 2 - IMAGE_HEIGHT / 2 ,
       		 200, 200);
   	 }
   	 String result = "";
   	 if(buttonPressed)
   	 {
   		 //TODO: the variable 'player' and 'computer' hold the choice of each player
   		 //there are constants to check if(player == ROCK) for example
   		 //determine the winner of the game depending on the choice of the computer and the
   		 //player
   		 //reassign the variable 'result' to "you win" / "you lose" / "you tie"
   		 if(player==ROCK && computer==PAPER)
   		 {
       		 result="You lose, the computer chose paper and you chose rock";
   		 }
   		 else if(player==ROCK && computer==ROCK)
   		 {
       		 result="You tie, the computer chose rock and you chose rock";
   		 }
   		 else if(player==ROCK && computer==SCISSORS)
   		 {
       		 result="You win, the computer chose scissors and you chose rock";
   		 }
  		 
   		 else if(player==PAPER && computer==ROCK)
   		 {
       		 result="You lose, the computer chose rock and you chose paper";
   		 }
   		 else if(player==PAPER && computer==PAPER)
   		 {
       		 result="You tie, the computer chose paper and you chose paper";
   		 }
   		 else if(player==PAPER && computer==SCISSORS)
   		 {
       		 result="You lose, the computer chose scissors and you chose paper";
   		 }
  		 
   		 else if(player==SCISSORS && computer==ROCK)
   		 {
       		 result="You lose, the computer chose rock and you chose scissors";
   		 }
   		 else if(player==SCISSORS && computer==PAPER)
   		 {
       		 result="You win, the computer chose paper and you chose scissors";
   		 }
   		 else if(player==SCISSORS && computer==SCISSORS)
   		 {
       		 result="You tie, the computer chose scissors and you chose scissors";
   		 }

   		 layout.setText(font, "[WHITE]" + result);
   		 font.draw(batch, layout, WORLD_WIDTH / 2 - layout.width / 2, WORLD_HEIGHT / 2);
   		 layout.setText(font, "Click to play again");
   		 font.draw(batch, layout, WORLD_WIDTH / 2 - layout.width / 2, WORLD_HEIGHT / 2 - 20);

   	 }

   	 layout.setText(font, "ROCK PAPER SCISSORS");
   	 font.draw(batch, layout, WORLD_WIDTH / 2 - layout.width / 2, WORLD_HEIGHT - 20);
   	 batch.end();

    }

    @Override
    public void resize(int width, int height){
   	 viewport.update(width, height, true);
    }

    @Override
    public void dispose(){
   	 renderer.dispose();
   	 font.dispose();
   	 batch.dispose();
   	 for(Texture t : textures)
   	 {
   		 t.dispose();
   	 }
    }

    public boolean keyDown (int keycode) {
   	 return false;
    }

    public boolean keyUp (int keycode) {
   	 return false;
    }

    public boolean keyTyped (char character) {
   	 return false;
    }

    public boolean touchDown (int x, int y, int pointer, int button) {
   	 return false;
    }

    public boolean touchUp (int x, int y, int pointer, int button) {
   	 return false;
    }

    public boolean touchDragged (int x, int y, int pointer) {
   	 return false;
    }

    public boolean mouseMoved (int x, int y) {

   	 screenCoord.x = x;
   	 screenCoord.y = y;
   	 worldCoord = viewport.unproject(screenCoord);  

   	 // System.out.println("x = " + x + " y = " + y + " wX = " + worldCoord.x + " wY = " + worldCoord.y);
   	 return true;
    }

    public boolean scrolled (int amount) {
   	 return false;
    }
}